#!/usr/bin/env node

/**
 * // Copyright 2022 under MIT License
 * Module dependencies.
 */

const app = require( "../app" )
const debug = require( "debug" )( "server:server" )
const http = require( "http" )
const knex = require( "knex" )
const pg = require( "pg" )
const knexConfig = require( "../knexfile" )


// Run the startup function
startup()

/**
 * Performs all startup actions and launches the server
 */
async function startup() {

	// Create database connection and store it in Express 
	const db = knex( knexConfig )
	app.set( "db", db )

	// Migrate Database on Startup
	const version = await db.migrate.currentVersion()
	console.log( "Database Migration Version: " + version )
	if ( version == "none" ) {
		console.log( "Database Empty - Migrating and Seeding" )
		await db.migrate.latest()
		await db.seed.run()
	} else {
		console.log( "Database Exists - Migrating" )
		await db.migrate.latest()
		console.log( "Migrations Complete!" )
	}

	/** 
   * Set the trust proxy settings 
   */
	const trustProxy = process.env.TRUST_PROXY 
	if( trustProxy ) {
		// The 'trust proxy' setting can either be a boolean
		// (blanket trust any proxy) or a specific ip address
		if( trustProxy === "true" ) app.set( "trust proxy", true )
		else app.set( "trust proxy", trustProxy )
	}

	/**
   * Get port from environment and store in Express.
   */

	const port = normalizePort( process.env.PORT || "9000" )
	app.set( "port", port )

	/**
   * Create HTTP server.
   */

	const server = http.createServer( app )

	/**
   * Listen on provided port, on all network interfaces.
   */

	server.listen( port )
	server.on( "error", onError )
	server.on( "listening", onListening )

	/**
   * Normalize a port into a number, string, or false.
   */

	function normalizePort( val ) {
		const port = parseInt( val, 10 )

		if ( isNaN( port ) ) {
			// named pipe
			return val
		}

		if ( port >= 0 ) {
			// port number
			return port
		}

		return false
	}

	/**
   * Event listener for HTTP server "error" event.
   */

	function onError( error ) {
		if ( error.syscall !== "listen" ) {
			throw error
		}

		const bind = typeof port === "string"
			? "Pipe " + port
			: "Port " + port

		// handle specific listen errors with friendly messages
		switch ( error.code ) {
		case "EACCES":
			console.error( bind + " requires elevated privileges" )
			process.exit( 1 )
			break
		case "EADDRINUSE":
			console.error( bind + " is already in use" )
			process.exit( 1 )
			break
		default:
			throw error
		}
	}

	/**
   * Event listener for HTTP server "listening" event.
   */

	function onListening() {
		const addr = server.address()
		const bind = typeof addr === "string"
			? "pipe " + addr
			: "port " + addr.port
		debug( "Listening on " + bind )
	}

}